\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{mptikz}[2017/12/13 MPTikZ]

\RequirePackage{ifluatex}
\ifluatex\else
  \PackageError{mptikz}{LuaTeX is required for this package. Aborting.}{%
    This package can only be used with the LuaTeX engine^^J%
    (command ‘lualatex’ or ‘luatex’).^^J%
    Package loading has been stopped to prevent additional errors.}
  \expandafter\endinput
\fi
\RequirePackage{luacode}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                              LUA CODE                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{luacode*}

-- Helper functions ---------------------------------------------------
local function t(str, ...)
  local arg = {...}
  tex.print(string.format(str, unpack(arg)))
end


local function ifelse(cond, val_t, val_f)
  if cond then
    return val_t
  else
    return val_f
  end
end


local function ifnotnil(val, default)
  return ifelse(val ~= nil, val, default)
end


local function range(a,b,step)
  step = step or 1
  if b == nil then a, b = 1, a end
  if step == 0 then error('ValueError: xrange() arg 3 must not be zero') end
  if a + step < a then return function() end end
  a = a - step
  return function()
    a = a + step
    if a <= b then return a end
  end
end


local function list_iter (t)
  local i = 0
  local n = #t
  return function ()
    i = i + 1
    if i <= n then return t[i] end
  end
end


local function table_clone(original)
  local copy = {}
  for key, value in pairs(original) do
    copy[key] = value
  end
  return copy
end


local function table_update(dict, new_vals)
  local new_dict = table_clone(dict)
  for key, val in pairs(new_vals) do
    new_dict[key] = val
  end
  return new_dict
end


local function DefaultTable(init, defaults)
  local res = ifnotnil(defaults, {})
  if init ~= nil then
    res = table_update(res, init)
  end

  function res:get (key, value)
    return ifelse(self[key] ~= nil, self[key], value)
  end

  return res
end


local function draw_legs(orientation, nr, leglen, width, height, props)
  for i = 1,nr do
    local x1
    local x2
    local y1
    local y2
    local name

    if orientation == 'N' then
      x1 = (i / (nr + 1) - 0.5) * width
      x2 = x1
      y1 = height/2
      y2 = y1 + leglen
      name = string.format('%s_N%i', props['tensor_name'], i)

    elseif orientation == 'S' then
      x1 = (i / (nr + 1) - 0.5) * width
      x2 = x1
      y1 = -height/2
      y2 = y1 - leglen
      name = string.format('%s_S%i', props['tensor_name'], i)

    elseif orientation == 'W' then
      x1 = -width/2
      x2 = x1 - leglen
      y1 = (i / (nr + 1) - 0.5) * width
      y2 = y1
      name = string.format('%s_W%i', props['tensor_name'], i)

    elseif orientation == 'E' then
      x1 = width/2
      x2 = x1 + leglen
      y1 = (i / (nr + 1) - 0.5) * width
      y2 = y1
      name = string.format('%s_E%i', props['tensor_name'], i)

    else
      error(string.format('%s is not a valid orientation', orientation))
    end

    t('\\draw[%s] (%f,%f) -- coordinate[midway] (%s) (%f,%f) coordinate (%s);',
      props['leg_style'], x1, y1, name, x2, y2, name .. 'e')
  end
end


-- Public functions ---------------------------------------------------
mptikz = {}

mptikz.defaults = {
  -- default style values
  len_vertical_legs = 0.25,
  len_horizontal_legs = 0.25,
  tensor_height = 1,
  tensor_width = 1,
  tensor_name = 'T',
  tensor_style = 'draw, fill=orange, rounded corners=0.1cm',
  leg_style = 'thick',
  -- default values for the legs
  N = 0, W = 0, S = 0, E = 0, virtual=1
}

function mptikz.draw_tensor(props)
  local props = DefaultTable(props, mptikz.defaults)

  local w = props['tensor_width']
  local h = props['tensor_height']

  t('\\begin{scope}[shift={(%f,%f)}]', props:get('x', 0), props:get('y', 0))

  -- draw the legs first
  draw_legs('N', props['N'], props['len_vertical_legs'], w, h, props)
  draw_legs('S', props['S'], props['len_vertical_legs'], w, h, props)
  draw_legs('E', props['E'], props['len_horizontal_legs'], w, h, props)
  draw_legs('W', props['W'], props['len_horizontal_legs'], w, h, props)

  -- draw the node body
  local rect_src = string.format('\\draw[%s] (%f,%f) rectangle (%f,%f) {};',
                                 props['tensor_style'], -w/2, -h/2, w/2, h/2)
  t('\\node (%s) at (0,0) {\\tikz{%s}};', props['tensor_name'], rect_src)
  t('\\end{scope}')
end


function mptikz.draw_mpa(sites, props)
  local props = DefaultTable(props, mptikz.defaults)
  local total_width = 2 * props['len_horizontal_legs'] + props['tensor_width']
  local nr_sites, iter

  if type(sites) == 'table' then
    iter = list_iter(sites)
    nr_sites = sites[#sites]
  else
    iter = range(sites)
    nr_sites = sites
  end

  for site in iter do
    local updates = {
      W = ifelse(site > 1, props['virtual']),
      E = ifelse(site < nr_sites, props['virtual']),
      x = props:get('x', 0) + (site - 1) * total_width,
      tensor_name = string.format('%s_%i', props['tensor_name'], site)
    }
    mptikz.draw_tensor(table_update(props, updates))
  end
end


function mptikz.set_style(style)
  mptikz.defaults = table_update(mptikz.defaults, style)
end

\end{luacode*}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                             LaTeX Part                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\tensor}[1]{\luaexec{mptikz.draw_tensor(#1)}}
\newcommand{\mpa}[2]{\luaexec{mptikz.draw_mpa(#1, #2)}}
\newcommand{\tensorstyle}[1]{\luaexec{mptikz.set_style(#1)}}

\endinput
